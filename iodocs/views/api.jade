div.topbar_area
  img(src='/images/logo-playbasis.png')|topbar


div.readable_area

  div.detail_enclosure

    span#detail.switch  
      |Checkout Playbasis - live API &rarr;
    h1=apiInfo.name 
  
      br
      h2.topic_header Overview
      p.p_wrap 
        | The following is the API reference for interacting with our web service that is the heart of our gamification engine. The web service is responsible for processing users’ actions (comment, like, share, etc.) which can be triggered from websites, mobile applications and internet enabled devices. Once actions are fed into the system, game rules associated with the actions will execute and respond with game events (badge unlocked, level up, exp gained, etc.) to be displayed to end users. Game rules are defined through the game editor inside the 
        a(href='https://www.pbapp.net/admin') admin panel
        | . 
      br
      br
      h2.topic_header Basic Usages
      h3.sub_header Calling the API
      p.p_wrap
        | The URL for all endpoints starts with:
        code
          https://api.pbapp.net
        br
        | You can see all avilable methods and try calling them directly on this page.
      br
      h3.sub_header Authentication
      p.p_wrap
        | You can call any GET mothods with just your API key, but to call POST methods you must first acquire an access token by calling the /Auth method with a valid API key and secret. The /Auth method will respond with an access token, which will be valid for 3 days. After it is expired, you’ll have to call the /Auth method again to generate a new access token. You can view/manage your api-key and api-secret via the 
        a(href='https://www.pbapp.net/admin') admin panel
      br
      p.p_wrap
        | For security reasons, please make sure that your access token is kept secured on your server and not easily exposed to clients. If a hacker got a hold of your access token, he or she will be able to manually call our api and perform fake actions to receives rewards until the token expire.
      br
      h3.sub_header Registering Users
      p.p_wrap
        | Once you’ve acquired the access token, you’ll be able to register your users into our system with a call to the /Player/:id/register method in the Player API. The user id that you provide in the register method is the link from users in your database to the same users in our system; so, it is best that it is the same id that you use to identify your own users. You only need to register each of your users once. If you have a large number of existing users, you can contact us to help you import them.
      br
      h3.sub_header Doing Actions
      p.p_wrap
        | Actions are basically things that your users do on your website or service. An action can trigger a number of game rules that starts with the same action. Users will be rewarded according to the logic defined in the game rules. Assuming you’ve already setup your game rules via the 
        a(href='https://www.pbapp.net/admin') admin panel
        | , you can now start letting your users perform actions to triggers game rules and receive rewards. If you have not already setup your game rules or have questions about how to configure the game rules, please contact us or refer to the user manual of the admin panel.
      br
      p.p_wrap
        | For our system to know that your user has just performed an action, so that we can process the related game rules, you need to call the /Engine/rule method in the Engine API. You’ll need to pass the id of the user that trigger the action and the name of the action as arguments. Make sure that the name of the action passed in as argument matched with the action names that you setup in the game rules. For examples, if a game rule starts with an action called “like”, but you passed in an action call “love” or “pic_like” or “likes”, the game rule will not trigger.
      br
      p.p_wrap
        | Another possible gotcha that one should be aware of is the user id that you passed in as argument to the /Engine/rule method should be the user that actually receives the reward. For example, if you want to give points when a user acquire a new follower. You have a user who click the follow button and a user that gained a new follower, make sure you passed in the id of the user that will receive the point, which is the user that gained a new follower, not the user that clicked the follow button.
      br
      h3.sub_header Receiving Rewards
      p.p_wrap
        | When calling the /Engine/rule method, rewards may be awarded to the player related to the action as a result of the processed game rules. If any rewards are given, all information about the rewards will be included in the response of the /Engine/rule method.
      br
      h3.sub_header Login and Logout
      p.p_wrap
        | When a user login or logout, you should also tell our system by calling the /Player/:id/login or /Player/:id/logout method in the Player API. This step is not strictly required, but highly recommended as we have some features that rely on knowing when users are logging in or out, for example real-time notifications, logging, and tracking last login time.
      br
      h3.sub_header Querying Information
      p.p_wrap
        | Playbasis API has several ways for retrieving information about your users. The most common methods are in the Player API and Badge API. Please refer to the API documentation for more information.
      br
      br
      h2.topic_header Receiving Real-Time Notification
      p.p_wrap
        | Whenever some notable event happens within your site, Playbasis server will broadcast the event to all connected clients in real-time. Clients can use 
        a(href='http://socket.io') socket.io
        |  to subscribe to the activity-feed that belongs to a specific site, and receive data for each event emitted after the time of subscription. The following snippet (in jade/javascript) shows how to subscribe and start receiving activity-feed for your domain:
        pre
          code 
            script(src='/socket.io/socket.io.js')
              script
                var socket = io.connect('https://node.pbapp.net');
                socket.on('connect', function(data){
                console.log('client connected');
                  socket.emit('subscribe', {channel:'yourdomain.com'});
                });
                socket.on('message', function(data){
                  console.log('msg:' + data);
                });
      h2.topic_header Social Integration
      h3.sub_header Facebook
      p.p_wrap
        | Playbasis API is integrated with Facebook’s Realtime Update API which allows our server to receive events when changes are made to a Facebook Page. This gives you the ability to trigger game rules when users perform actions on your Facebook Page. Setting up your Facebook Page with Playbasis is simple; you only need a Facebook App that has Realtime Update setup to our API endpoint, then add the app to your Facebook Page. That's all.
        br
        | For more detailed instructions, follow Facebook documentation on
        a(href='https://developers.facebook.com/docs/reference/api/realtime/') how to enable realtime update for your app
        |  and use the following API endpoint in the callback field:
        pre
          code
            https://api.pbapp.net/Engine/rule/facebook
      p.p_wrap
        | Then follow instructions on how to 
        a(href='https://developers.facebook.com/docs/reference/api/page/#realtime') setup your app to receive realtime update on a Facebook Page.
        br
        | If you are interested in gamifying your Facebook Page, please contact our technical staff for additional information.
      br
      h3.sub_header Twitter
      p.p_wrap
        | Playbasis API has the ability to trigger game rules when user tweet a specific word, such as a hashtag or @reply. If you are interested in leveraging the power of twitter, please contact our technical staff for additional information.
      br
      h3.sub_header Janrain (Social Sign-in and Social Sharing widget)
      p.p_wrap
        | Playbasis API is integrated with Janrain to give you a simple way to add Social Sign-in and Social Sharing to your website through attractive widgets; but that’s not all. We also provide a way to gamify the widgets by allowing game rules to be triggered when users interact with them. Please contact our technical staff for additional information.
      br
      br
      h2.topic_header SDKs
      p.p_wrap
        | We provide SDKs for faster and easier integrations with your framework. If you need an SDK, please contact our technical staff to request an SDK for your platform.
      br
      br
      br

  div.apidoc_enclosure
        div
          span#api.switch  
            |&larr; Back to API-Overview 
          h1.h-after-switch API Documentation
        div.clear
        div
          - if (session.authed && apiInfo.oauth && apiInfo.oauth.type =='three-legged')
              - var authed ='authed'
          - else
              - var authed =''


          form#credentials
              input(type='hidden', name='apiName', value=apiName)
              - if (apiInfo.auth) 
                  section(class='credentials ' + authed)
                   - if (authed && apiInfo.oauth)
                       span Authenticated with OAuth
                       img(src='/images/accept.png')
                   - else
                       h2 API Credentials
                         img(src='/images/key.png')

                       - if (apiInfo.oauth)
                           input(type='hidden', name='oauth', value='authrequired')

                       - if (apiInfo.auth.defaultKey)
                           - var defaultKey =apiInfo.auth.defaultKey
                       - else
                           - var defaultKey =''

                       - if (apiInfo.auth.defaultSecret)
                           - var defaultSecret =apiInfo.auth.defaultSecret
                       - else
                           - var defaultSecret =''
                       div
                           label(for='key') API Key
                           input(id='key', name='key', value=defaultKey, style='color=#EEEEEE')
                       div
                           - if (apiInfo.oauth || apiInfo.signature)
                               label(for='secret') Shared Secret
                               input(id='secret', name='secret', value=defaultSecret, style='color=#EEEEEE')
                       - if (apiInfo.oauth && apiInfo.oauth.type !='two-legged')
                           div
                              input(name='oauth', value='Authenticate with OAuth', type='submit', id='oauth-auth')

          div(id='controls')
              ul
                  li
                      a#toggle-endpoints(href='#') Toggle All Endpoints
                  li
                      a#toggle-methods(href='#') Toggle All Methods

          ul
              - each endpoint in apiDefinition.endpoints
                  li.endpoint
                      h3.title
                          span.name=endpoint.name
                          ul.actions
                              li.list-methods
                                  a(href='#') List Methods
                              li.expand-methods
                                  a(href='#') Expand Methods
                      - if (endpoint.methods.length)
                      ul.methods.hidden
                          - each method in endpoint.methods
                              - var httpmethod =method.HTTPMethod.toLowerCase()
                              - if (method.RequiresOAuth ==='Y' || method.RequiresOAuth ===true)
                                  - var secure ='authrequired'
                              - else
                                  - var secure =''
                              li(class='method ' + httpmethod + ' ' + secure)
                                  div.title
                                      span.http-method #{method.HTTPMethod}
                                      span.name #{method.MethodName}
                                      span.uri #{method.URI}
                                  form.hidden
                                      input(type='hidden', name='httpMethod', value=method.HTTPMethod)
                                      input(type='hidden', name='oauth', value=secure)
                                      input(type='hidden', name='methodUri', value=method.URI)

                                      span.description #{method.Synopsis}
                                      br
                                      br
                                      - if (method.parameters.length > 0)
                                          table.parameters
                                              thead
                                                  tr
                                                      th Parameter
                                                      th Value
                                                      th Type
                                                      th Location
                                                      th Description
                                              tbody
                                                  - var paramCount =0
                                                  - each parameter in method.parameters
                                                      - paramCount++
                                                      div(id='param' + paramCount)
                                                        - if (parameter.Required =='Y')
                                                            - var required =true
                                                            - var className ='required'
                                                        - else
                                                            - var required =false
                                                            - var className =''
                                                        tr(class=className)
                                                            td.name=parameter.Name
                                                            td.parameter
                                                                - if (parameter.Type =='enumerated')
                                                                    select(name='params[' + parameter.Name + ']', placeholder=className)
                                                                      - if (parameter.Default =='')
                                                                          option(value='') 
                                                                      - each choice in parameter.EnumeratedList
                                                                          - if (parameter.Default ==choice)
                                                                                  option(value=choice, selected=true) #{choice}
                                                                          - else
                                                                                  option(value=choice) #{choice}
                                                                - else if (parameter.Type =='boolean')
                                                                     select(name='params[' + parameter.Name + ']', placeholder=className)
                                                                          - if (parameter.Default =='')
                                                                                  option(value='') 
                                                                          - each choice in [apiInfo.booleanTrueVal,apiInfo.booleanFalseVal]
                                                                             - if (parameter.Default ==choice)
                                                                                     option(value=choice, selected=true) #{choice}
                                                                             - else
                                                                                     option(value=choice) #{choice}
                                                                - else
                                                                    input(name='params[' + parameter.Name + ']', value=parameter.Default, placeholder=className)
                                                                    input(type='hidden', name='locations['+parameter.Name+']', value=parameter.Location || 'query')
                                                            td.type=parameter.Type
                                                            td.location
                                                                p=parameter.Location || 'query'
                                                            td.description
                                                                p=parameter.Description || 'No description'
                                                                - if (parameter.Type =='enumerated' && parameter.EnumeratedDescription)
                                                                    dl.clearfix
                                                                        - each description, choice in parameter.EnumeratedDescription
                                                                            dt #{choice}
                                                                            dd #{description}
                                      - if (method.headers && method.headers.length > 0)
                                          div.headers
                                              h4.title
                                                  div.indicator
                                                  span Headers
                                              div.fields
                                                  table
                                                      colgroup
                                                          col(class='name')
                                                          col(class='value')
                                                          col(class='remove')
                                                      thead
                                                          tr
                                                              th Name
                                                              th(colspan='2') Value
                                                      tbody
                                                          tr
                                                              td
                                                                  input(name='headerNames[]', placeholder='Name')
                                                              td
                                                                  input(name='headerValues[]', placeholder='Value')
                                                              td
                                                                  a(href='#', class='remove') Remove
                                                  a(href='#', class='add-headers') Add Header
                                              // Create header fields and button to add/remove headers.
                                      - if (!method['read-only'])
                                          input(type='submit', id=method.MethodName, value='Try it!')

div.menu_area
  div.en
    ul
      li
        |somethings
      li
        |somethings

div.clear
